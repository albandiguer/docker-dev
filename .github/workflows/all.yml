name: All

# Run this workflow every time a new commit pushed to your repository
on:
  workflow_dispatch

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  base:
    # Name the Job
    name: Base ubuntu
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: images/ubuntu-dev-base
          tags: albandiguer/ubuntu-dev-base:latest
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  tmux:
    # Name the Job
    name: Tmux
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    needs: base

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: images/power-tmux
          tags: albandiguer/power-tmux:latest
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  nvim:
    # Name the Job
    name: Nvim
    needs: tmux
    # Set the type of machine to run on
    runs-on: ubuntu-latest


    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: images/nvim
          tags: albandiguer/nvim:latest
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  nodejs-base:
    # Name the Job
    name: NodeJS
    needs: nvim
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: images/nodejs-dev/base
          tags: albandiguer/nodejs-dev-base:latest
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  nodejs-erbium:
    if: ${{ false }} # disabled
    # Name the Job
    name: Erbium
    needs: nodejs-base
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: images/nodejs-dev/erbium
          tags: albandiguer/nodejs-dev:erbium
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  nodejs-current:
    # Name the Job
    name: Current
    needs: nodejs-base
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: images/nodejs-dev/current
          tags: albandiguer/nodejs-dev:current
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  terraform:
    # Name the Job
    name: Terraform
    needs: nodejs-base
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: images/terraform-dev
          tags: albandiguer/terraform-dev:latest
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
